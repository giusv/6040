(defun add (to from val)
  (let ((size (array-dimension to 0)))
    (dotimes (i size)
      (setf (aref to i) (+ (aref from i) val)))))

(defun ema (x alpha)
  (declare (type (simple-array double-float (*)) x))
  (declare (type double-float alpha))
  ;; (declare (optimize (speed 3)
  ;;                    (safety 0)
  ;;                    (debug 0)))
  (let* ((1-alpha (- 1d0 alpha))
         (size (array-dimension x 0))
         (y (make-array size :element-type 'double-float
                        :initial-element 0d0)))
    (setf (aref y 0) (* alpha (aref x 0)))
    (do ((i 1 (1+ i)))
        ((= i size) y)
      (declare (type fixnum i))
      (setf (aref y i) (the double-float (+ 
                                          (the double-float (* alpha (aref x i))) 
                                          (the double-float (* 1-alpha (aref y (- i 1))))))))))

(defun main ()
  (declare (optimize (speed 3)
                     (safety 0)
                     (debug 0)))
  (let* ((size 10000000)
         (x (make-array size :element-type 'double-float 
                        :initial-element 1d0))
         (y (ema x 0.001d0)))
    ;; (dotimes (i size)
    ;;   (format t "~a ~a~%" (aref x i) (aref y i)))
    ))
